using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Torch;

namespace SRPG.Data
{
    public class Character
    {
        /// <summary>
        /// Printable name for the character.
        /// </summary>
        public string Name;
        /// <summary>
        /// Character's current maximum health pool.
        /// </summary>
        public int MaxHealth;
        /// <summary>
        /// Character's current maximum mana pool.
        /// </summary>
        public int MaxMana;
        /// <summary>
        /// Character's currently available health pool. The character will die if this reaches 0.
        /// </summary>
        public int CurrentHealth;
        /// <summary>
        /// Character's currently available mana pool. Each time an active ability is used, this is reduced.
        /// </summary>
        public int CurrentMana;
        /// <summary>
        /// DAWISH stat list for this character. This list is the unmodified list, and thus ignores status ailments,
        /// buffs and debuffs
        /// </summary>
        public Dictionary<Stat, int> Stats;
        /// <summary>
        /// Temporary modifications to a character's DAWISH stats, such as from passive abilities, buffs, debuffs
        /// or status ailments such as blind.
        /// </summary>
        public Dictionary<Stat, int> BonusStats;
        /// <summary>
        /// List of items currently equipped by the character, including weapon, armor and accessory.
        /// </summary>
        public List<Item> Inventory;
        /// <summary>
        /// List of abilities the character can perform. This includes active, passive and attack.
        /// </summary>
        public List<Ability> Abilities;
        /// <summary>
        /// A small portrait to be shown when this character is highlighted.
        /// </summary>
        public Texture2D Portrait;
        /// <summary>
        /// The SpriteObject that acts as a visual representation of this character on the battlefield.
        /// </summary>
        public SpriteObject Sprite;
        /// <summary>
        /// An indicator of the character's class, which will determine weapon / armor usability.
        /// </summary>
        public CharacterClass Class;
        /// <summary>
        /// An X,Y pair indicating where on the current battlefield this character is located. Outside of a battle scene,
        /// this is not applicable and can be ignored.
        /// </summary>
        public Vector2 Location;
        /// <summary>
        /// An integer indicating what faction this character belongs to - 0 represents the player and 1 represents the enemy.
        /// This is used to determine targeting, AI control, player control, and character movement grids.
        /// </summary>
        public int Faction;
        /// <summary>
        /// A boolean value indicating whether or not the character is able to move in the current turn. This is set to true at the start
        /// of a round, and false upon moving. Status ailments such as sleep and stun can set this to false during BeginRound.
        /// </summary>
        public bool CanMove;
        /// <summary>
        /// A boolean value indicating whether or not the character is able to act in the current turn. An action is defined as using an
        /// item, attacking, using an active ability, or switching weapons. This is set to true at the start of the round, but can
        /// be set to false due to sleep or stun.
        /// </summary>
        public bool CanAct;

        public Direction Direction;

        public Vector2 Velocity;

        public Dictionary<Stat, int> StatExperienceLevels;
        public Dictionary<Ability, int> AbilityExperienceLevels; 

        
        /// <summary>
        /// Process any status ailments that would impact a character at the start of the round,
        /// such as sleep or stun.
        /// </summary>
        public void BeginRound()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Process any status ailments that would impact a character at the end of the round, such as poison.
        /// Also check to see if any status ailments naturally were removed, or if any passive abilities can
        /// be processed, such as focus.
        /// </summary>
        public void EndRound()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Receive a hit and process it accordingly. This processing will decrease incoming damage based on defense,
        /// process passive abilities, decrease character health and other related processing.
        /// </summary>
        /// <param name="hit">A hit generated by a call to Ability.GenerateHits().</param>
        public void ProcessHit(Hit hit)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Indicate whether or not the character is being threatened. Being threatened is defined as being within attack
        /// range of any regular attacks. Regular attacks do not include active or passive abilities and are strictly limited
        /// to weapon attacks.
        /// </summary>
        /// <param name="board">The game board for the current battle. This will be asked about enemy positioning.</param>
        /// <returns></returns>
        public bool IsThreatened(BattleBoard board)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Raise the character's experience levels, in accordance with the stat multipliers granted.
        /// </summary>
        /// <param name="experience">amount of experience points gained</param>
        public void GainExperience(int experience)
        {
            throw new NotImplementedException();
        }

        public void Die()
        {
            
        }

        public int GenerateExperience()
        {
            throw new NotImplementedException();
        }
    }
}
